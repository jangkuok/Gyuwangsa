<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:security="http://www.springframework.org/schema/security"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/security
        http://www.springframework.org/schema/security/spring-security.xsd"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

    <security:http auto-config="false">

        <!-- 로그인 페이지와 로그인 처리 설정 -->
        <!--
        <security:form-login login-page="/loginPage.do" login-processing-url="/user/loginForm.do" username-parameter="user_nm" password-parameter="password"
                             default-target-url="/" always-use-default-target="true"/>
        -->
        <!-- 총 관리자 접근 가능 -->
        <security:intercept-url pattern="/admin/**" access="hasRole('ROLE_ADMIN')"/>
        <!-- 브랜드 관리자 접근 가능 -->
        <security:intercept-url pattern="/brand/**" access="hasRole('ROLE_BRAND')"/>
        <!-- 유저 접근 가능 -->
        <security:intercept-url pattern="/user/**" access="hasRole('ROLE_USER')"/>
        <!-- 모든 권한 접근 가능 -->
        <security:intercept-url pattern="/**" access="permitAll()"/>

        <!-- 로그아웃 설정 -->
        <!--
        <security:logout logout-url="/logoutForm.do" logout-success-url="/" invalidate-session="true" delete-cookies="JSESSIONID"/>
        -->
        <!-- CSRF 보호 비활성화 -->
        <security:csrf disabled="true"/>

        <!-- 동시 세션 제어 설정 -->
        <!--
        <security:session-management>
            <security:concurrency-control max-sessions="1" error-if-maximum-exceeded="true" expired-url="/loginPage.do?expired=true"/>
        </security:session-management>
        -->
        <!-- jwt 로그인 설정 -->
        <security:form-login login-page="/loginPage.do" login-processing-url="/user/loginForm.do"
                             username-parameter="user_nm" password-parameter="password"
                             authentication-success-handler-ref="authenticationSuccessHandler"
                             authentication-failure-handler-ref="authenticationFailureHandler"/>

        <!--jwt 로그아웃 설정-->
        <security:logout logout-url="/logoutForm.do" invalidate-session="true" delete-cookies="JSESSIONID"
                         success-handler-ref="jwtLogoutSuccessHandler"/>

        <!-- jwtTokenFilter 로 토큰 유효성 검사 수행 -->
        <security:custom-filter before="FILTER_SECURITY_INTERCEPTOR" ref="jwtTokenProvider"/>
    </security:http>

    <!-- 사용자 인증을 수행 -->
    <security:authentication-manager id="authenticationManager">
        <security:authentication-provider user-service-ref="securityUserDetailsService">
            <security:password-encoder ref="passwordEncoder"/>
        </security:authentication-provider>
    </security:authentication-manager>

    <!-- 사용자 인증 수행 경로 설정 -->
    <bean id="securityUserDetailsService" class="com.gyuwangsa.security.SecurityUserDetailsService"/>
    <bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>

    <!-- jwtConfig bean -->
    <bean id="jwtConfig" class="com.gyuwangsa.security.JwtConfig"/>

    <!-- jwt 토큰 생성 및 유효성 검사 bean -->
    <bean id="jwtTokenProvider" class="com.gyuwangsa.security.JwtTokenProvider">
        <constructor-arg ref="jwtConfig"/>
    </bean>
    <!-- 사용자 로그아웃 및 jwt 토큰 파기-->
    <bean id="jwtLogoutSuccessHandler" class="com.gyuwangsa.security.JwtLogoutSuccessHandler">
        <property name="jwtTokenProvider" ref="jwtTokenProvider"/>
    </bean>
    <!-- 인증 성공 bean-->
    <bean id="authenticationSuccessHandler" class="com.gyuwangsa.security.SecurityAuthenticationSuccessHandler">
        <constructor-arg ref="jwtTokenProvider"/>
    </bean>

    <!-- 인증 실패 bean-->
    <bean id="authenticationFailureHandler" class="com.gyuwangsa.security.SecurityAuthenticationFailureHandler"/>
</beans>